Code Bundle Generated on 2025-02-11 00:26:12
================================================================================

File: ./generate_coding_structure.py
--------------------------------------------------------------------------------
import os
from pathlib import Path
from datetime import datetime

def bundle_code(root_dir='.', output_file='code_bundle.txt', exclude_dirs={'.venv', 'tests', 'node_modules', '__pycache__'}):
    """
    Recursively reads all files in a directory and bundles their contents into a single file.
    
    Args:
        root_dir (str): Root directory to start scanning from
        output_file (str): Name of the output file
        exclude_dirs (set): Set of directory names to exclude
    """
    
    # Text file extensions to include
    text_extensions = {
        '.py', '.js', '.css', '.html', '.txt', '.md', '.json', 
        '.yml', '.yaml', '.ini', '.cfg', '.conf', '.sh', '.env',
        '.django', '.sql', '.jsx', '.tsx', '.ts'
    }
    
    def is_binary(file_path):
        """Check if file is binary by reading its first few bytes"""
        try:
            with open(file_path, 'tr') as check_file:
                check_file.read(1024)
                return False
        except UnicodeDecodeError:
            return True
    
    try:
        with open(output_file, 'w', encoding='utf-8') as bundle:
            # Write header with timestamp
            bundle.write(f"Code Bundle Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            bundle.write("="* 80 + "\n\n")
            
            # Walk through directory tree
            for dirpath, dirnames, filenames in os.walk(root_dir):
                # Remove excluded directories
                dirnames[:] = [d for d in dirnames if d not in exclude_dirs]
                
                # Get relative path
                rel_path = os.path.relpath(dirpath, root_dir)
                
                for filename in filenames:
                    file_path = os.path.join(dirpath, filename)
                    extension = os.path.splitext(filename)[1].lower()
                    
                    # Skip if not a text file extension or if it's a binary file
                    if extension not in text_extensions or is_binary(file_path):
                        continue
                    
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            # Write file header
                            bundle.write(f"File: {os.path.join(rel_path, filename)}\n")
                            bundle.write("-" * 80 + "\n")
                            
                            # Write file contents
                            bundle.write(f.read())
                            bundle.write("\n\n" + "=" * 80 + "\n\n")
                            
                    except Exception as e:
                        bundle.write(f"Error reading file {file_path}: {str(e)}\n\n")
                        
        print(f"Bundle created successfully: {output_file}")
        
    except Exception as e:
        print(f"Error creating bundle: {str(e)}")

if __name__ == "__main__":
    # Get the current working directory
    current_dir = os.getcwd()
    
    # Create output filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = f"code_bundle_{timestamp}.txt"
    
    # Set of directories to exclude
    exclude_dirs = {'.venv', 'tests', 'node_modules', '__pycache__'}
    
    # Run the bundler
    bundle_code(current_dir, output_filename, exclude_dirs)

================================================================================

File: ./code_bundle_20250211_002612.txt
--------------------------------------------------------------------------------


================================================================================

File: ./README.md
--------------------------------------------------------------------------------
readme_content = """
# Health & Nutrition Tracking System

## Project Overview
The **Health & Nutrition Tracking System** is a web-based application designed to help users track their nutrition, set health goals, and receive AI-powered recommendations. The app is clean and user-friendly, built with modern web technologies to ensure simplicity and maintainability.

## Goal
The primary goal of this web app is to allow users to log their daily meals, track their progress towards health goals, and receive personalized recommendations to help them make healthier choices based on their dietary preferences, goals, and activity levels.

## Project Structure
Here's a quick overview of the project directory:
```
   health_tracker_project/
   ├── apps/                     # Custom Django apps (e.g., core, users)
   │   ├── core/                 # Core app with main functionalities
   │   └── users/                # User-related functionality (authentication, profiles)
   │
   ├── health_tracker/           # Main project directory
   │   ├── __init__.py          # Project initialization
   │   ├── settings.py          # Django settings
   │   ├── urls.py              # URL routing
   │   └── wsgi.py              # WSGI entry point
   │
   ├── static/                   # Static files (CSS, JS, images)
   │   ├── css/                 # Tailwind CSS styles
   │   ├── js/                  # JavaScript files
   │   └── images/              # Image assets
   │
   ├── templates/                # HTML templates for rendering views
   │   └── base.html            # Base template for the application
   │
   ├── .gitignore               # Git ignore rules
   ├── pyproject.toml           # Poetry project configuration
   ├── README.md                # Project documentation
   └── manage.py                # Django management script
```

## Technical Stack

- **Backend**: Django (Python)
- **Frontend**: Tailwind CSS, HTMX (for interactivity), Chart.js (for data visualizations)
- **Database**: PostgreSQL (during production), SQLite (during development)
- **AI Integration**: OpenAI API (for personalized recommendations)
- **Web Server**: Gunicorn
- **Deployment**: Docker (with Nginx as reverse proxy)

## Getting Started

To get started with the project, follow these steps:

1. **Clone the Repository**:

    ```bash
    git clone https://github.com/yourusername/health_tracker_project.git
    cd health_tracker_project
    ```

2. **Create and Activate the Virtual Environment**:

    ```bash
    poetry install
    ```

3. **Apply Migrations**:

    ```bash
    poetry run python manage.py migrate
    ```

4. **Run the Development Server**:

    ```bash
    poetry run python manage.py runserver
    ```

Now, visit [http://127.0.0.1:8000/](http://127.0.0.1:8000/) in your browser to start using the application.

## License

This project is open-source and available under the MIT License.


================================================================================

File: ./generate_hierarchy.py
--------------------------------------------------------------------------------
import os

def list_directory_structure(base_path, exclude_dirs=None):
    if exclude_dirs is None:
        exclude_dirs = {'.venv', 'tests', 'node_modules','__pycache__'}
    
    directory_structure = {}

    # Walk through the directory
    for root, dirs, files in os.walk(base_path):
        # Get the relative path to the base path
        relative_root = os.path.relpath(root, base_path)
        
        # Skip excluded directories
        dirs[:] = [d for d in dirs if d not in exclude_dirs]

        # Skip the base directory itself
        if relative_root == '.':
            continue

        # Build the directory structure dictionary
        directory_structure[relative_root] = {
            "dirs": dirs,
            "files": files
        }

    return directory_structure


def print_directory_structure(structure, indent=0):
    for directory, contents in structure.items():
        print("  " * indent + f"{directory}/")
        
        # Print directories
        for subdir in contents['dirs']:
            print("  " * (indent + 1) + f"{subdir}/")

        # Print files
        for file in contents['files']:
            print("  " * (indent + 1) + file)


# Get the current directory
base_path = os.getcwd()

# Get the directory structure, excluding .venv and tests
structure = list_directory_structure(base_path)

# Print the structure
print_directory_structure(structure)


================================================================================

File: ./docker-compose.yml
--------------------------------------------------------------------------------


================================================================================

File: ./manage.py
--------------------------------------------------------------------------------
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "health_tracker.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


================================================================================

File: static/css/styles.css
--------------------------------------------------------------------------------
/* static/css/styles.css */
@import 'bootstrap/dist/css/bootstrap.min.css';


================================================================================

File: static/js/main.js
--------------------------------------------------------------------------------


================================================================================

File: templates/base.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    {% load static %}
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Health Tracker</title>
    <!-- Bootstrap CSS from CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Your custom CSS -->
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <div class="container">
        {% block content %}
        {% endblock %}
    </div>

    <!-- Bootstrap JS and dependencies from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
</body>
</html>

================================================================================

File: templates/components.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Component Library</title>
    <script src="https://cdn.jsdelivr.net/npm/windicss"></script>
</head>
<body class="bg-gray-100 p-10">
    <h1 class="text-3xl font-semibold text-center mb-8">Component Library</h1>
    
    <!-- Buttons -->
    <section class="mb-10">
        <h2 class="text-xl font-bold mb-4">Buttons</h2>
        <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Primary Button</button>
        <button class="bg-gray-300 text-gray-700 px-4 py-2 rounded ml-2 hover:bg-gray-400">Secondary Button</button>
        <button class="bg-gray-200 text-gray-500 px-4 py-2 rounded ml-2 cursor-not-allowed" disabled>Disabled Button</button>
    </section>
    
    <!-- Cards -->
    <section class="mb-10">
        <h2 class="text-xl font-bold mb-4">Cards</h2>
        <div class="bg-white shadow-md p-6 rounded-lg max-w-md">
            <h3 class="text-lg font-semibold">Food Log</h3>
            <p class="text-gray-600">Track your meals easily.</p>
        </div>
    </section>
    
    <!-- Forms -->
    <section class="mb-10">
        <h2 class="text-xl font-bold mb-4">Forms</h2>
        <input type="text" placeholder="Enter text..." class="border rounded px-4 py-2 w-full">
    </section>
    
    <!-- Modals (Example structure) -->
    <section class="mb-10">
        <h2 class="text-xl font-bold mb-4">Modal (Example)</h2>
        <div class="hidden fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
            <div class="bg-white p-6 rounded-lg shadow-md max-w-md">
                <h3 class="text-lg font-semibold">Modal Title</h3>
                <p class="text-gray-600">This is a sample modal.</p>
                <button class="mt-4 bg-red-500 text-white px-4 py-2 rounded">Close</button>
            </div>
        </div>
    </section>
</body>
</html>


================================================================================

File: health_tracker/asgi.py
--------------------------------------------------------------------------------
"""
ASGI config for health_tracker project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "health_tracker.settings")

application = get_asgi_application()


================================================================================

File: health_tracker/__init__.py
--------------------------------------------------------------------------------


================================================================================

File: health_tracker/settings.py
--------------------------------------------------------------------------------
"""
Django settings for health_tracker project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-6o3c53pqf!sox^37j&76tsjf!5-35oaef7qcb&(czdpb@@nrr9"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
AUTH_USER_MODEL = 'users.User'


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "apps.core",  # Add your apps.core app
    "apps.users",  # Add your apps.users app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "health_tracker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"], # Specifies the location of the templates folder
        "APP_DIRS": True, # Ensures templates within each app's "templates" folder are found
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "health_tracker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# At the bottom of settings.py
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


================================================================================

File: health_tracker/urls.py
--------------------------------------------------------------------------------
"""
URL configuration for health_tracker project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: rom django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings


urlpatterns = [
    path("admin/", admin.site.urls),
    path('', include('apps.core.urls')), # Include core app URLs
    path('users/', include('apps.users.urls')),  # Include users app URLs
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


================================================================================

File: health_tracker/wsgi.py
--------------------------------------------------------------------------------
"""
WSGI config for health_tracker project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "health_tracker.settings")

application = get_wsgi_application()


================================================================================

File: apps/core/models.py
--------------------------------------------------------------------------------
from django.db import models

# Create your models here.


================================================================================

File: apps/core/__init__.py
--------------------------------------------------------------------------------


================================================================================

File: apps/core/apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "apps.core"


================================================================================

File: apps/core/admin.py
--------------------------------------------------------------------------------
from django.contrib import admin

# Register your models here.


================================================================================

File: apps/core/tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.


================================================================================

File: apps/core/urls.py
--------------------------------------------------------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'), # Landing page
    path('dashboard/', views.dashboard, name='dashboard'),
    path('ai_insights/', views.ai_insights, name='ai_insights'),
    # Add other URLs specific to core app
]

================================================================================

File: apps/core/views.py
--------------------------------------------------------------------------------
from django.shortcuts import render

# Create your views here.
def dashboard(request):
    return render(request, 'core/dashboard.html')

def ai_insights(request):
    return render(request, 'core/ai_insights.html')

def home(request):
    return render(request, 'core/home.html')

================================================================================

File: apps/core/migrations/__init__.py
--------------------------------------------------------------------------------


================================================================================

File: apps/core/templates/core/ai_insights.html
--------------------------------------------------------------------------------
<h1>Dashboard</h1>
<p>Welcome to your personal dashboard!</p>

================================================================================

File: apps/core/templates/core/home.html
--------------------------------------------------------------------------------
<h1>Dashboard</h1>
<p>Welcome to your personal dashboard!</p>

================================================================================

File: apps/core/templates/core/dashboard.html
--------------------------------------------------------------------------------
{% extends 'base.html' %}
{% load static %}

{% block content %}
<h1>Dashboard</h1>
<p>Welcome to your personal dashboard!</p>
<a href="#" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Primary link</a>
<a href="#" class="btn btn-secondary btn-lg active" role="button" aria-pressed="true">Link</a>
{% endblock %}

================================================================================

File: apps/users/models.py
--------------------------------------------------------------------------------
from django.contrib.auth.models import AbstractUser, PermissionsMixin
from django.db import models
from django.utils.translation import gettext_lazy as _

class User(AbstractUser, PermissionsMixin):
    """Extended User model"""
    email = models.EmailField(unique=True)
    is_verified = models.BooleanField(default=False)
    theme = models.CharField(max_length=20, null=True, blank=True)
    language = models.CharField(max_length=10, null=True, blank=True)
    reset_token = models.CharField(max_length=100, unique=True, null=True, blank=True)
    reset_token_expires = models.DateTimeField(null=True, blank=True)
    bio = models.TextField(null=True, blank=True)

    # Required fields when extending AbstractUser
    is_staff = models.BooleanField(
        _("staff status"),
        default=False,
        help_text=_("Designates whether the user can log into this admin site."),
    )
    is_active = models.BooleanField(
        _("active"),
        default=True,
        help_text=_(
            "Designates whether this user should be treated as active. "
            "Unselect this instead of deleting accounts."
        ),
    )

    class Meta:
        verbose_name = _("User")
        verbose_name_plural = _("Users")

    def __str__(self):
        return self.username

class UserProfile(models.Model):
    """User profile for health and fitness data"""
    class Gender(models.TextChoices):
        MALE = 'M', _('Male')
        FEMALE = 'F', _('Female')
        OTHER = 'O', _('Other')
        PREFER_NOT_TO_SAY = 'N', _('Prefer not to say')

    class FitnessGoal(models.TextChoices):
        WEIGHT_LOSS = 'WL', _('Weight Loss')
        MUSCLE_GAIN = 'MG', _('Muscle Gain')
        MAINTENANCE = 'MT', _('Maintenance')
        GENERAL_FITNESS = 'GF', _('General Fitness')
        ATHLETIC_PERFORMANCE = 'AP', _('Athletic Performance')

    # Core relationship
    user = models.OneToOneField(
        User, 
        on_delete=models.CASCADE,
        related_name='profile'
    )

    # Basic Information
    age = models.PositiveIntegerField()
    gender = models.CharField(
        max_length=1,
        choices=Gender.choices,
        default=Gender.PREFER_NOT_TO_SAY
    )
    height = models.DecimalField(
        max_digits=5, 
        decimal_places=2,
        help_text="Height in centimeters"
    )
    current_weight = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        help_text="Weight in kilograms"
    )
    target_weight = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        help_text="Target weight in kilograms"
    )

    # Health Information
    medical_conditions = models.JSONField(default=list, blank=True)
    medications = models.JSONField(default=list, blank=True)
    allergies = models.JSONField(default=list, blank=True)
    dietary_restrictions = models.JSONField(default=list, blank=True)

    # Fitness Information
    fitness_goal = models.CharField(
        max_length=2,
        choices=FitnessGoal.choices,
        default=FitnessGoal.GENERAL_FITNESS
    )
    activity_level = models.PositiveSmallIntegerField(
        choices=[
            (1, _('Sedentary')),
            (2, _('Lightly Active')),
            (3, _('Moderately Active')),
            (4, _('Very Active')),
            (5, _('Extremely Active'))
        ],
        default=1
    )
    exercise_preferences = models.JSONField(default=list)

    # Nutrition Goals
    daily_calorie_goal = models.PositiveIntegerField(null=True, blank=True)
    macros_preferences = models.JSONField(
        default=dict,
        help_text="JSON containing protein, carbs, and fat goals in grams"
    )
    meal_preference = models.JSONField(
        default=dict,
        help_text="JSON containing meal timing and frequency preferences"
    )

    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = _("User Profile")
        verbose_name_plural = _("User Profiles")

    def __str__(self):
        return f"{self.user.username}'s Profile"

    def calculate_bmr(self):
        """Calculate Basal Metabolic Rate"""
        # Implementation here
        pass

    def calculate_tdee(self):
        """Calculate Total Daily Energy Expenditure"""
        # Implementation here
        pass

================================================================================

File: apps/users/__init__.py
--------------------------------------------------------------------------------


================================================================================

File: apps/users/apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "apps.users"


================================================================================

File: apps/users/admin.py
--------------------------------------------------------------------------------
from django.contrib import admin

# Register your models here.


================================================================================

File: apps/users/tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.


================================================================================

File: apps/users/urls.py
--------------------------------------------------------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('profile/', views.profile, name='profile'),
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    # Add other URLs specific to users app
]

================================================================================

File: apps/users/views.py
--------------------------------------------------------------------------------
from django.shortcuts import render

# Create your views here.
def profile(request):
    return render(request, 'users/profile.html')

def register(request):
    return render(request, 'users/register.html')

def login(request):
    return render(request, 'users/login.html')


================================================================================

File: apps/users/migrations/__init__.py
--------------------------------------------------------------------------------


================================================================================

File: apps/users/migrations/0001_initial.py
--------------------------------------------------------------------------------
# Generated by Django 5.1.6 on 2025-02-11 00:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("theme", models.CharField(blank=True, max_length=20, null=True)),
                ("language", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "reset_token",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                ("reset_token_expires", models.DateTimeField(blank=True, null=True)),
                ("bio", models.TextField(blank=True, null=True)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("age", models.PositiveIntegerField()),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Other"),
                            ("N", "Prefer not to say"),
                        ],
                        default="N",
                        max_length=1,
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Height in centimeters",
                        max_digits=5,
                    ),
                ),
                (
                    "current_weight",
                    models.DecimalField(
                        decimal_places=2, help_text="Weight in kilograms", max_digits=5
                    ),
                ),
                (
                    "target_weight",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Target weight in kilograms",
                        max_digits=5,
                    ),
                ),
                ("medical_conditions", models.JSONField(blank=True, default=list)),
                ("medications", models.JSONField(blank=True, default=list)),
                ("allergies", models.JSONField(blank=True, default=list)),
                ("dietary_restrictions", models.JSONField(blank=True, default=list)),
                (
                    "fitness_goal",
                    models.CharField(
                        choices=[
                            ("WL", "Weight Loss"),
                            ("MG", "Muscle Gain"),
                            ("MT", "Maintenance"),
                            ("GF", "General Fitness"),
                            ("AP", "Athletic Performance"),
                        ],
                        default="GF",
                        max_length=2,
                    ),
                ),
                (
                    "activity_level",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Sedentary"),
                            (2, "Lightly Active"),
                            (3, "Moderately Active"),
                            (4, "Very Active"),
                            (5, "Extremely Active"),
                        ],
                        default=1,
                    ),
                ),
                ("exercise_preferences", models.JSONField(default=list)),
                (
                    "daily_calorie_goal",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "macros_preferences",
                    models.JSONField(
                        default=dict,
                        help_text="JSON containing protein, carbs, and fat goals in grams",
                    ),
                ),
                (
                    "meal_preference",
                    models.JSONField(
                        default=dict,
                        help_text="JSON containing meal timing and frequency preferences",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
    ]


================================================================================

File: apps/users/templates/users/profile.html
--------------------------------------------------------------------------------
<h1>User Profile</h1>
<p>Here you can view and update your profile details.</p>


================================================================================

File: apps/users/templates/users/register.html
--------------------------------------------------------------------------------


================================================================================

File: apps/users/templates/users/login.html
--------------------------------------------------------------------------------


================================================================================

